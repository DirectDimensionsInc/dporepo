{% extends 'default_bootstrap_admin.html.twig' %}

{% block stylesheets %}
  {{ parent() }}
  <link href="https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap.min.css" rel="stylesheet" type="text/css" />
  <link href="https://cdn.datatables.net/buttons/1.5.1/css/buttons.bootstrap.min.css" rel="stylesheet" type="text/css" />
  <link href="{{ asset('bundles/lifotypeahead/css/typeaheadbundle.css') }}" rel="stylesheet" type="text/css" />
  <link href="{{ asset('lib/javascripts/node_modules/handsontable/dist/handsontable.full.min.css') }}" rel="stylesheet" type="text/css" />
{% endblock %}

{% block content %}

  <ol class="breadcrumb">
    <li><a href="/admin">Dashboard</a></li>
    <li class="active">Uploads</li>
  </ol>

  <!-- row -->
  <div class="row">
    <!-- column -->
    <div class="col-sm-12 col-md-12">
      <!-- nav-tabs -->
      <ul class="nav nav-tabs" id="uploadsTabs" role="tablist">
        <li role="presentation">
          <a href="#browseUploads" id="browse-tab" role="tab" data-toggle="tab" aria-controls="browse" aria-expanded="true">Browse Imports</a>
        </li>
        <li role="presentation" class="active">
          <a href="#upload" role="tab" id="upload-tab" data-toggle="tab" aria-controls="upload">New Upload</a>
        </li>
      </ul>
      <!-- tab-content -->
      <div class="tab-content" id="uploadsTabContent" style="padding-top: 3rem;">
        <!-- tab-pane 1 -->
        <div class="tab-pane fade" role="tabpanel" id="browseUploads" aria-labelledby="browse-tab">
          <table id="browse" class="table table-striped table-bordered" cellspacing="0" width="100%">
            <thead>
              <tr>
                <th class="text-center">Project</th>
                <th class="text-center">Status</th>
                <th class="text-center">Total Subjects</th>
                <th class="text-center">Total Items</th>
                <th class="text-center">Total Capture Datasets</th>
                <th class="text-center">Date Uploaded</th>
                <th class="text-center">Uploaded By</th>
              </tr>
            </thead>
          </table>
        </div>
        <!-- // tab-pane 1 -->
        <!-- tab-pane 2 -->
        <div class="tab-pane fade in active" role="tabpanel" id="upload" aria-labelledby="upload-tab">
          <!-- row -->
          <div class="row">
            <div class="col-sm-6 col-md-6">
              <!-- Typeahead form element -->
              {{ form_start(form) }}
              <h3>Choose a Parent Record</h3>
              {{ form_row(form.parent_picker) }}
              {{ form_end(form) }}
            </div>
          </div>
          <!-- // row -->
          <!-- row -->
          <div class="row">
            <!-- column 1 -->
            <div class="col-sm-6 col-md-6">
              <!-- File Drag and Drop zone -->
              <!-- panel -->
              <div class="panel panel-default panel-uploads" data-set-number="1" data-file-count="0">
                <div class="panel-heading">
                  <p>Uploads Stage</p>
                  <p style="font-size: 1.3rem; font-weight: normal;">Drag and drop files onto this page or click the "Add Files" button.</p>
                </div>
                <!-- panel-body -->
                <div class="panel-body" style="height: 40rem; overflow: scroll;">
                  <!-- Template Begins -->
                  <!-- HTML heavily inspired by http://blueimp.github.io/jQuery-File-Upload/ -->
                  <div class="table table-striped" class="files" id="previews">
                    <div id="template" class="row file-row">
                      <div class="col-sm-7 col-md-7">
                        <div class="pull-left"><span class="name" data-dz-name></span>, <span class="size" data-dz-size></span></div>
                        <div class="pull-right"><strong class="error text-danger" data-dz-errormessage></strong></div>
                      </div>
                      <div class="col-sm-5 col-md-5">
                        <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                          <div class="progress-bar progress-bar-success" style="width:0%;" data-dz-uploadprogress></div>
                        </div>
                      </div>
                      {# <div>
                        <button class="btn btn-primary start" style="display: none;">
                            <i class="glyphicon glyphicon-upload"></i>
                            <span>Start</span>
                        </button>
                        <button data-dz-remove class="btn btn-warning cancel" style="display: none;">
                            <i class="glyphicon glyphicon-ban-circle"></i>
                            <span>Cancel</span>
                        </button>
                        <button data-dz-remove class="btn btn-danger delete" style="display: none;">
                          <i class="glyphicon glyphicon-trash"></i>
                          <span>Delete</span>
                        </button>
                      </div> #}
                    </div>
                  </div>
                  <!-- Template Ends -->
                </div>
                <!-- // panel-body -->
              </div>
              <!-- // panel -->

            </div>
            <!-- // column 1 -->
            <!-- column 2 -->
            <div class="col-sm-6 col-md-6">
              <div class="panel panel-default panel-validation-results">
                <!-- Panel contents -->
                <div class="panel-heading">
                  <p>Pre-Validation Results</p>
                  <p style="font-size: 1.3rem; font-weight: normal;">To revalidate, click the "Clear Upload Stage" button and add files back to the Uploads Stage.</p>
                </div>
                <div class="panel-body">
                </div>
              </div>
            </div>
            <!-- // column 2 -->
          </div>
          <!-- // row -->
          <!-- row -->
          <div id="actions" class="row">
            <!-- column 1 -->
            <div class="col-sm-7 col-md-7">
              <!-- The fileinput-button span is used to style the file input field as button -->
              <span class="btn btn-success fileinput-button dz-clickable">
                  <i class="glyphicon glyphicon-plus"></i>
                  <span>Add Files</span>
              </span>
              <button type="reset" class="btn btn-warning cancel">
                  <i class="glyphicon glyphicon-ban-circle"></i>
                  <span>Clear Upload Stage</span>
              </button>
              <span class="btn btn-default prevalidate-trigger">
                  <i class="glyphicon glyphicon-cog"></i>
                  <span>Pre-Validate Scans and CSV Files</span>
              </span>
              <button type="submit" class="btn btn-primary start hidden">
                  <i class="glyphicon glyphicon-upload"></i>
                  <span>Start Upload</span>
              </button>
            </div>
            <!-- // column 1 -->
            <!-- column 2 -->
            <div class="col-sm-5 col-md-5">
              <!-- The global file processing state -->
              <span class="fileupload-process">
                <div id="total-progress" class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                  <div class="progress-bar progress-bar-success" style="width:0%;" data-dz-uploadprogress=""></div>
                </div>
              </span>
            </div>
            <!-- // column 2 -->
          </div>
          <div class="row hidden" id="panel-spreadsheets">
            <div class="col-sm-12 col-md-12">
              <!-- Spreadsheets container (Handsontable) -->
            </div>
          </div>
          <!-- // row -->
        </div>
        <!-- // tab-pane 2 -->
      </div>
      <!-- // tab-content -->
    </div>
    <!-- // column -->
  </div>
  <!-- // row -->

  <!-- Uploading Modal -->
  <div class="modal fade" id="uploading-modal" tabindex="-1" role="dialog" aria-labelledby="uploadingLabel" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title" id="uploadingLabel"><i class="glyphicon glyphicon-time"></i> <span id="uploading-modal-title"></span></h2>
        </div>
        <div class="modal-body" style="min-height: 24rem;">
          <div class="text-center">
            <span id="uploading-modal-message"></span>
          </div>
          <div class="center-block" style="width: 140px; margin-top: 3rem;">
            <img src="/lib/images/spinner.gif" alt="loading animation" style="width: 140px;">
          </div>
        </div>
        <div class="modal-footer">
        </div>
      </div>
    </div>
  </div>

{% endblock %}

{% block js_bottom %}
  {{ parent() }}
  <script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/buttons/1.5.1/js/dataTables.buttons.min.js"></script>
  <script src="https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap.min.js"></script>
  <script src="https://cdn.datatables.net/buttons/1.5.1/js/buttons.bootstrap.min.js"></script>
  <script src="https://cdn.datatables.net/buttons/1.5.1/js/buttons.colVis.min.js"></script>
  <script src="{{ asset('bundles/lifotypeahead/js/bootstrap-typeahead.js') }}"></script>
  <script src="{{ asset('bundles/lifotypeahead/js/typeaheadbundle.js') }}"></script>
  <script type="text/javascript" src="{{ asset('lib/javascripts/dropzone.js') }}"></script>
  <script type="text/javascript" src="{{ asset('lib/javascripts/node_modules/handsontable/dist/handsontable.full.min.js') }}"></script>
  <script type="text/javascript">
    $(document).ready(function() {

      var details_page = "/admin/projects/subjects/";
      
      $('#browse').dataTable({
        "columns": [
          { "data": "project_name" },
          { "data": "job_status" },
          { "data": "subjects_total" },
          { "data": "items_total" },
          { "data": "capture_datasets_total" },
          { "data": "date_created" },
          { "data": "username" }       
        ],
        //"dom": 'lfip<"datatables_bulk_actions">tip',
        "pagingType": "simple_numbers",
        "stateSave": true,
        "order": [[5,"desc"]],
        // Show processing throbber.
        "processing": true,
        // All data management will be done on the server side.
        "serverSide": true,
        // Path to the file that is going to handle the queries.
        "ajax": "/admin/import/datatables_browse_imports",
        // Method type.
        "serverMethod": "POST",
        // Values in the length dropdown.
        "lengthMenu":[10,50,100,500],
        "columnDefs":[
          {"sWidth":"425px","aTargets":[0]},
          {"bSortable":false,"aTargets":[0,4]}
        ],
        "fnRowCallback":function(nRow, aData, iDisplayIndex) {
          // This table row.
          var thisTableRow = $(nRow);
          // Send to details page when clicked.
          thisTableRow.find('td').click(function() {
            // This table cell.
            var thisTableCell = $(this);
            // Don't do anything if the table cell has the 'manage_column' CSS class.
            if(thisTableCell.hasClass('manage_column')) return;
            // Send to the details page.
            window.location.href = '/admin/import/' + aData.job_id + '/' + aData.project_id;
          });

        }
      });
    });

    // // Place focus on the parent record picker.
    // $('form[name="uploads_parent_picker_form"]').find('#uploads_parent_picker_form_parent_picker_text').focus();
    // console.log($('form[name="uploads_parent_picker_form"]').find('#uploads_parent_picker_form_parent_picker_text'));

    var jobId,
        resultsContainer = $('#panel-spreadsheets').find('.col-md-12'),
        loadingGif = $('<img />').attr('src', '/lib/images/spinner.gif').attr('alt', 'loading animation').attr('style', 'width: 140px;'),
        loadingGifContainer = $('<div />').addClass('center-block').attr('style', 'width: 140px;').append(loadingGif);

    // Dropzone.js
    // Get the template HTML and remove it from the document.
    var previewNode = document.querySelector("#template");
    previewNode.id = "";
    var previewTemplate = previewNode.parentNode.innerHTML;
    previewNode.parentNode.removeChild(previewNode);

    // See: http://www.dropzonejs.com/#configuration-options
    var uploadsDropzone = new Dropzone(document.body, { // Make the whole body a dropzone
      url: "{{ oneup_uploader_endpoint('repository') }}", // Set the url
      parallelUploads: 1,
      previewTemplate: previewTemplate,
      autoQueue: false, // Make sure the files aren't queued until manually added
      previewsContainer: "#previews", // Define the container to display the previews
      clickable: ".fileinput-button", // Define the element that should be used as click trigger to select files.
      createImageThumbnails: false,
      maxFilesize: 10240,
      ignoreHiddenFiles: true,
      chunking: true,
      chunkSize: 20000000, // chunk size in bytes (20 MB)
      acceptedFiles: "image/*,application/text,application/json,.csv,.txt,.jpg,.tif,.png,.dng,.obj,.ply,.mtl",
      dictInvalidFileType: "File type not allowed"
    });

    uploadsDropzone.on("addedfile", function(file) {

      if(typeof file.fullPath !== 'undefined'){

        let directoryStructure = file.fullPath.replace('/' + file.name, '');
            directoryStructureDiv = $('<div />').addClass('directory-structure').attr('style', 'font-weight: bold; margin-bottom: 0.75rem;'),
            spanIcon = $('<span />').addClass('glyphicon glyphicon-folder-close').attr('style', 'margin-right: 4px;');

        directoryStructureDiv.append(spanIcon, directoryStructure);
        $(file.previewTemplate).before(directoryStructureDiv);

      }
      // Hookup the start button
      // file.previewElement.querySelector(".start").onclick = function() { uploadsDropzone.enqueueFile(file); };
    });

    // Prevalidate click handler.
    $('.prevalidate-trigger').on('click', function(e) {

      // Set the parentRecordId.
      let parentRecordId = parentRecordChecker();
      // Check if the parent record has been selected.
      if(!parentRecordId) return;

      // Get queued files.
      let queuedFiles = uploadsDropzone.getAcceptedFiles();
      // Check if files have been added to the queue.
      // Also check to see if there are actual files (e.g. photogrammetry scans, models), and not just CSVs.
      if(!queuedFilesChecker(queuedFiles)) return;

      // Generate a temporary job ID.
      generateJobId(parentRecordId, true);

      // Get the parent record type.
      let parentRecordType = getRecordType();

      // Display the progress modal.
      $('#uploading-modal-title').empty();
      $('#uploading-modal-title').append('Pre-Validating...');
      $('#uploading-modal-message').empty();
      $('#uploading-modal-message').append('Pre-validation in progress');
      $('#uploading-modal').modal('show');
      
      for (var i = 0; i < queuedFiles.length; i++) {

        // Set a custom parameter, 'parentRecordId', so it can be passed to the back-end.
        queuedFiles[i].parentRecordId = parentRecordId;

        // Set a custom parameter, 'parentRecordType', so it can be passed to the back-end.
        queuedFiles[i].parentRecordType = parentRecordType;

        // Get the extension of the file.
        let fileExtension = getExtension(queuedFiles[i].name);

        // Pre-validate CSV files, files count, and file names.
        if(fileExtension === 'csv'){
          // Set a custom parameter, 'prevalidate', so it can be used within the 'success' function.
          queuedFiles[i].prevalidate = true;
          // Start the upload.
          uploadsDropzone.enqueueFile(queuedFiles[i]);
          // Don't display the progress bar.
          document.querySelector("#total-progress").style.opacity = "0";
        }

        // Pre-validate files count and names.
        if(queuedFiles[i].name === 'manifest-sha1.txt') {

          let allManifestFiles = [],
              allAcceptedFiles = [],
              reader = new FileReader();

          // Read the manifest file.
          reader.readAsText(queuedFiles[i]);
          reader.addEventListener('loadend', function(event) {
            let manifest = event.target.result,
                manifestArray = manifest.split(/\r?\n/),
                acceptedFiles = uploadsDropzone.getAcceptedFiles();

            // Process the manifest to get all of the files count and names.
            for (var i = 0; i < manifestArray.length; i++) {
              if(manifestArray[i].length) {
                let currentLineArray = manifestArray[i].split(' ');
                    currentFullFilePath = currentLineArray[1].split('/');
                // Add the file to the allManifestFiles array.
                allManifestFiles.push(currentFullFilePath[currentFullFilePath.length - 1]);
              }
            }

            // Process the acceptedFiles to get all of the file names.
            for (var i = 0; i < acceptedFiles.length; i++) {
              if((acceptedFiles[i].name.indexOf('.txt') === -1) && (acceptedFiles[i].name.indexOf('.csv') === -1)) {
                allAcceptedFiles.push(acceptedFiles[i].name);
              }
            }

            // Get the difference between the two arrays of files, 
            // using the manifest as the authoritative source.
            var diff = $(allManifestFiles).not(allAcceptedFiles).get();

            // If there are file-based errors, populate the panel-body.
            if(diff.length) {
              for (var i = 0; i < diff.length; i++) {
                let fileMessage = $('<div />').addClass('alert alert-danger files-validation-error').attr('role', 'alert').html('<strong>Files Pre-validation:</strong> Missing file: ' + diff[i]);
                // Append the message to the panel-body container.
                $('.panel-validation-results').find('.panel-body').append(fileMessage);
              }
            }

            // If there are no file-based errors, display a message.
            if(!diff.length) {
              // The message.
              let message = $('<div />').addClass('alert alert-success files-validation-success').attr('role', 'alert').html('<strong>Files Pre-validation:</strong> No file validation errors found.');
              // Append the message to the panel-body container.
              $('.panel-validation-results').find('.panel-body').append(message);
            }

          });
          
        }
        
      }

      // If there are no errors, change the states of the action buttons.
      setTimeout(function() {
        // Check to see if there are errors.
        let fileErrors = $('.panel-validation-results .panel-body').find('.files-validation-error'),
            csvErrors = $('.panel-validation-results .panel-body').find('.cvs-validation-error');
        // No errors? Change the states of the action buttons.
        if(!fileErrors.length && !csvErrors.length) {
          // Disable the "Pre-Validate" and "Clear Upload Stage" buttons.
          $('.fileinput-button, .cancel, .prevalidate-trigger').attr('disabled', 'disabled');
          // Reveal the "Start Upload" button.
          $('.start').removeClass('hidden');
        }
      }, 2000);

      // Hide the progress modal.
      setTimeout(function() {
        $('#uploading-modal').modal('hide');
      }, 3000);

    });
    
    // Set the spreadsheet count so unique IDs can be assigned to the Handsontable containers.
    let spreadsheetCount = 1;

    uploadsDropzone.on("success", function(file, responseText) {

      // console.log(file);

      let fileExtension = getExtension(file.name);

      // If the uploaded file is being pre-validated,
      // set the file status back to 'added', prevalidate to false , and reset progress bars.
      if((typeof file.prevalidate !== 'undefined') && file.prevalidate && (fileExtension === 'csv')) {

        file.status = 'added';
        file.prevalidate = false;

        // Set the display state of progress bars.
        document.querySelector("#total-progress").style.opacity = "0";
        $(file.previewElement).find('.progress-bar').attr('style', 'width: 0;');

        // Subject import limitation message, based on the 'subject' parent record type.
        if((file.parentRecordType === 'subject') && (file.name === 'subjects.csv')) {
          // The message.
          let subjectImportMessage = $('<div />').addClass('alert alert-warning cvs-validation-error').attr('role', 'alert').html('<strong>' + file.name + '</strong>: Warning! The chosen parent record type is a "' + file.parentRecordType + '", therefore data within the "' + file.name + '" file will not be imported.');
          // Append the message to the panel-body container.
          $('.panel-validation-results').find('.panel-body').append(subjectImportMessage);
        }

        // Subject and Item import limitation message, based on the 'item' parent record type.
        if((file.parentRecordType === 'item') && ((file.name === 'subjects.csv') || (file.name === 'items.csv'))) {
          // The message.
          let itemImportMessage = $('<div />').addClass('alert alert-warning cvs-validation-error').attr('role', 'alert').html('<strong>' + file.name + '</strong>: Warning! The chosen parent record type is a "' + file.parentRecordType + '", therefore data within the "' + file.name + '" file will not be imported.');
          // Append the message to the panel-body container.
          $('.panel-validation-results').find('.panel-body').append(itemImportMessage);
        }

        // Subject, Item, and Capture Dataset import limitation message, based on the 'capture_dataset' parent record type.
        if((file.parentRecordType === 'capture_dataset') && ((file.name === 'subjects.csv') || (file.name === 'items.csv') || (file.name === 'capture_datasets.csv'))) {
          // The message.
          let captureDatasetImportMessage = $('<div />').addClass('alert alert-warning cvs-validation-error').attr('role', 'alert').html('<strong>' + file.name + '</strong>: Warning! The chosen parent record type is a "' + file.parentRecordType + '", therefore data within the "' + file.name + '" file will not be imported.');
          // Append the message to the panel-body container.
          $('.panel-validation-results').find('.panel-body').append(captureDatasetImportMessage);
        }

        // If no errors are returned, display a message.
        if(responseText && (typeof responseText.error === 'undefined')) {
          // The message.
          let message = $('<div />').addClass('alert alert-success cvs-validation-success').attr('role', 'alert').html('<strong>' + file.name + '</strong>: No CSV validation errors found.');
          // Append the message to the panel-body container.
          $('.panel-validation-results').find('.panel-body').append(message);
        }

        // If errors are returned, populate the Pre-Validation Results container.
        if(responseText && (typeof responseText.error !== 'undefined')) {

          let validationErrors = JSON.parse(responseText.error);

          // Display a general summary of validation errors.
          if(validationErrors.length) {
            // The message.
            let message = $('<div />').addClass('alert alert-danger cvs-validation-error').attr('role', 'alert').html('<p><strong>' + file.name + '</strong>: Validation errors found (also, see spreadsheet below).</p>');
            // Ordered list.
            let orderedList = $('<ol />');
            // Loop through the errors and append to the message.
            for (var i = 0; i < validationErrors.length; i++) {
              listItem = $('<li />').text(validationErrors[i].row + ': ' + validationErrors[i].error);
              orderedList.append(listItem);
            }
            // Append the ordered list to the message.
            message.append(orderedList);
            // Append the message to the panel-body container.
            $('.panel-validation-results').find('.panel-body').append(message);
          }

        }

        // Display the CSV within a spreadsheet interface, highlighting errors.
        // TODO: Make it possible to edit the spreadsheet and resubmit for pre-validation.
        // See: Handsontable
        // https://github.com/handsontable/handsontable
        let container,
            hotVarName = 'hot',
            panel = $('<div />').addClass('panel panel-default panel-spreadsheet'),
            panelHeading = $('<div />').addClass('panel-heading').text(file.name),
            panelHeadingContent = $('<span />')
              .attr('style', 'font-size: 1.5rem; font-weight: normal;')
              .html('<i class="glyphicon glyphicon-info-sign" style="margin-left: 1.5rem;"></i> For now, only for representation of the data. The goal is to allow for edits and resubmission.'),
            panelBody = $('<div />').addClass('panel-body').attr('id', 'csv-spreadsheet-' + spreadsheetCount);

        // Show the panel-spreadsheet container.
        $('#panel-spreadsheets').removeClass('hidden');
        // Populate the panel with the heading and body.
        panelHeading.append(panelHeadingContent);
        panel.append(panelHeading, panelBody);
        // Add the panel to the results container.
        resultsContainer.append(panel);

        // Initialize Handsontable.
        container = document.getElementById('csv-spreadsheet-' + spreadsheetCount);
        // Note: window[hotVarName + spreadsheetCount] is a dynamic variable.
        // This basically allows for multiple Handsontable instances.
        // See: https://stackoverflow.com/a/28130158/1298317
        window[hotVarName + spreadsheetCount] = new Handsontable(container, {
          data: JSON.parse(responseText.csv),
          rowHeaders: true,
          colHeaders: true,
          outsideClickDeselects: false,
          selectionMode: 'multiple',
        });

        // Style rows which have errors.
        // https://docs.handsontable.com/2.0.0/demo-selecting-ranges.html#page-styling
        // First, make sure there are errors to parse.
        if((typeof validationErrors !== 'undefined') && validationErrors.length) {
          for (var i = 0; i < validationErrors.length; i++) {
            // validationErrors[i].row
            // validationErrors[i].error
            let row = validationErrors[i].row.match(/\d/g);
            row = row.join('');
            // Select the rows with errors.
            window[hotVarName + spreadsheetCount].selectRows(parseInt(row));

            var selected = window[hotVarName + spreadsheetCount].getSelected();

            for (var index = 0; index < selected.length; index += 1) {
              var item = selected[index];
              var startRow = Math.min(item[0], item[2]);
              var endRow = Math.max(item[0], item[2]);
              var startCol = Math.min(item[1], item[3]);
              var endCol = Math.max(item[1], item[3]);

              for (var rowIndex = startRow; rowIndex <= endRow; rowIndex += 1) {
                for (var columnIndex = startCol; columnIndex <= endCol; columnIndex += 1) {
                  // Set the text-danger CSS class on the row containing the error.
                  window[hotVarName + spreadsheetCount].setCellMeta(rowIndex, columnIndex, 'className', 'text-danger');
                }
              }
            }

          }
          window[hotVarName + spreadsheetCount].deselectCell();
          window[hotVarName + spreadsheetCount].render();
        }

      }

      spreadsheetCount++;
    });

    // Update the total progress bar
    uploadsDropzone.on("totaluploadprogress", function(progress) {
      document.querySelector("#total-progress .progress-bar").style.width = progress + "%";
    });

    uploadsDropzone.on("sending", function(file, xhr, formData) {

      // Show the total progress bar when upload starts
      document.querySelector("#total-progress").style.opacity = "1";

      // And disable the start button
      // file.previewElement.querySelector(".start").setAttribute("disabled", "disabled");

      // Append custom data to formData.
      // NOTE: can't console.log formData after appending.
      // If you want to view formData, pass it to the server side then dump/echo.
      // See: https://github.com/enyo/dropzone/issues/1075

      // Add the jobId to the formData
      jobId = $('.prevalidate-trigger').attr('data-jobid');
      formData.append('jobId', jobId);

      // Add the prevalidate value to the formData
      if((typeof file.prevalidate !== 'undefined') && file.prevalidate) {
        formData.append('prevalidate', file.prevalidate);
      }

      // Add the parentRecordId value to the formData
      if((typeof file.parentRecordId !== 'undefined') && file.parentRecordId) {
        formData.append('parentRecordId', file.parentRecordId);
      }

      // Add the parentRecordType value to the formData
      if((typeof file.parentRecordType !== 'undefined') && file.parentRecordType) {
        formData.append('parentRecordType', file.parentRecordType);
      }

      // If the file is actually a folder, add the fullPath to the formData.
      if(file.fullPath){
        formData.append('fullPath', file.fullPath);
      }

    });

    // Hide the total progress bar when nothing's uploading anymore
    uploadsDropzone.on("queuecomplete", function(progress) {
      document.querySelector("#total-progress").style.opacity = "0";
      $(".file-row").find('.progress').removeClass('progress-striped active').addClass('progress-bar-success');

      // Redirect to the Upload overview page
      setTimeout(function() {
        let parentRecordId = parentRecordChecker();
        let parentProjectId = $('#uploads_parent_picker_form_parent_picker').attr('data-project-id');
        jobId = $('.prevalidate-trigger').attr('data-jobid');

        // Process and import the CSV files.
        $.ajax({
          'type': 'GET'
          ,'dataType': 'json'
          ,'url': '/admin/import_csv/' + jobId + '/' + parentProjectId + '/' + parentRecordId
          ,success: function(result) {
            if(result && result.length) {
              // Redirect to the Upload overview page.
              document.location.href = '/admin/import/' + jobId + '/' + parentProjectId;
            } else {
              $('#uploading-modal').modal('hide');

              swal({
                title: 'Error',
                text: 'CSV import failed',
                icon: 'warning',
              });

              $('.start').attr('disabled', 'disabled');
            }
          }
        });
        
      }, 1500);
      
    });

    // Setup the buttons for all transfers
    // The "add files" button doesn't need to be setup because the config
    // `clickable` has already been specified.
    document.querySelector("#actions .start").onclick = function() {

      // Check if the parent record has been selected.
      let parentRecordId = parentRecordChecker();
      // Get queued files.
      let queuedFiles = uploadsDropzone.getAcceptedFiles();
      // Check if files have been added to the queue.
      // Also check to see if there are actual files (e.g. photogrammetry scans, models), and not just CSVs.
      if(!queuedFilesChecker(queuedFiles)) return;

      // Generate a real job ID.
      generateJobId(parentRecordId, false);

      // Give some time (2 seconds) to create the job record in the database.
      setTimeout(function() {

        // Get the job ID from the data attribute of the prevalidate-trigger.
        let jobId = $('.prevalidate-trigger').attr('data-jobid');
        // Begin the uploading process.
        uploadsDropzone.enqueueFiles(uploadsDropzone.getFilesWithStatus(Dropzone.ADDED));
        // Prepare and display the modal.
        $('#uploading-modal-title').empty();
        $('#uploading-modal-title').append('Uploading and Importing Data');
        $('#uploading-modal-message').empty();
        let p1 = $('<p />').text('Upload and import in progress...');
        let p2 = $('<p />').text('This page will redirect once the upload process is complete. So, kick back and relax while the system shuffles things into place.');
        let p3 = $('<p />').html('This job\'s <a href="/admin/import/' + jobId + '/' + parentRecordId + '" target="_blank">upload/import details page</a> (opens in a new tab/window).');
        $('#uploading-modal-message').append(p1, p2, p3);
        $('#uploading-modal').modal('show');

      }, 2000);

    };

    document.querySelector("#actions .cancel").onclick = function() {
      // Remove files from Dropzone.
      uploadsDropzone.removeAllFiles(true);
      $('.directory-structure').remove();
      // Clear previous validation results from the validation panel.
      $('.panel-validation-results').find('.panel-body').empty();
      // Remove spreadsheets.
      resultsContainer.empty();
    };

    // // Typeahead - Custom Source Callback
    // // https://github.com/lifo101/typeahead-bundle#custom-source-callback
    // function get_parent_records(query, process) {

    //   let recordType = $('[name="recordType"]:checked').val();

    //   $.post('/admin/import/get_parent_records', {query: query, recordType: recordType}, 'json')
    //     .success(function (data) {
    //       // Must convert the data array into a flat list of strings. 
    //       // If your lookup function already returns a flat list, then $.map() is not needed.
    //       process($.map(data, function(a){
            
    //         $('#uploads_parent_picker_form_parent_picker').attr('data-suck', 'dick');
    //         return a.value;
    //       }));
    //     });

    //     let thisVal = $('#uploads_parent_picker_form_parent_picker_text').val();
    //     $('#uploads_parent_picker_form_parent_picker').val(thisVal);
    // }

    function parentRecordChecker() {
      // Parent record ID value.
      let parentRecordId = $('#uploads_parent_picker_form_parent_picker').val();
      // If there is no parent ID selected, then display an alert.
      if(!parentRecordId.length) {
        swal({
          title: 'Select Parent Record',
          text: 'Please select a parent record.',
          icon: 'warning',
        });
        return false;
      } else {
        return parentRecordId;
      }
    }

    function getRecordType() {
      // Parent record text value.
      let parentRecordText = $('#uploads_parent_picker_form_parent_picker_text').val();
      // Get the string found between the brackets (e.g. [ subject ] would return 'subject').
      parentRecordText = parentRecordText.substring(parentRecordText.lastIndexOf("[")+1,parentRecordText.lastIndexOf("]"));
      // Clean it up...
      parentRecordText = parentRecordText.toLowerCase();
      parentRecordText = parentRecordText.trim();
      parentRecordText = parentRecordText.replace(' ', '_');
      return parentRecordText;
    }

    function queuedFilesChecker(files) {

      // Display an alert if there are no files queued.
      if(!files.length) {
        swal({
          title: 'No Files Found',
          text: 'Please add files to the upload queue.',
          icon: 'warning',
        });
        return false;
      }

      // Display an alert if the 'manifest-sha1.txt' file isn't found in the queue.
      let filenames = [];
      // Build-out an array of files present.
      for (var i = 0; i < files.length; i++) {
        // Get the extension of the file.
        let fname = files[i].name;
        // Add it to the filenames array.
        filenames.push(fname);
      }

      if(filenames.indexOf('manifest-sha1.txt') === -1) {
        var span = document.createElement('span');
        span.innerHTML = 'Please add bagged (via BagIt) files to the upload queue. Learn more on the <a href="https://en.wikipedia.org/wiki/BagIt" target="_blank">BagIt Wikipedia page</a>';
        swal({
          title: 'File bag not found',
          content: span,
          icon: "warning",
        });
        return false;
      }

      return true;
    }

    function generateJobId(parentRecordId, temporary) {

      if((typeof temporary !== 'undefined') && temporary) {
        // Generate a temporary jobId.
        var tempJobId = 'temp-' + Math.floor(Math.random() * 2000) + 1;
        // Add the job ID as a data attribute of the prevalidate-trigger.
        $('.prevalidate-trigger').attr('data-jobid', tempJobId);
      } else {

        // Get the parent record type.
        let recordType = getRecordType();

        // Generate a real jobId.
        $.ajax({
          'type': 'GET'
          ,'global': false
          ,'dataType': 'text'
          ,'url': '/admin/create_job/' + parentRecordId + '/' + recordType
          ,success: function(result) {
            if(result) {
              var res = JSON.parse(result);
              // Add the job ID as a data attribute of the prevalidate-trigger.
              $('.prevalidate-trigger').attr('data-jobid', res.jobId);
              // Add the parent Project's id as a data attribute of the prevalidate-trigger.
              $('#uploads_parent_picker_form_parent_picker').attr('data-project-id', res.projectId);
            }
          }
        });
      }

    }

    function getExtension(fileName) {
      let fileNameArray = fileName.split('.');
      return fileNameArray[fileNameArray.length-1].toLowerCase();
    }
  </script>
{% endblock %}